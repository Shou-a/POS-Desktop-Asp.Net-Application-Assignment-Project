using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the MyTbl class.
	/// </summary>
    [Serializable]
	public partial class MyTblCollection : ActiveList<MyTbl, MyTblCollection>
	{	   
		public MyTblCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>MyTblCollection</returns>
		public MyTblCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                MyTbl o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the my_tbl table.
	/// </summary>
	[Serializable]
	public partial class MyTbl : ActiveRecord<MyTbl>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public MyTbl()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public MyTbl(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public MyTbl(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public MyTbl(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("my_tbl", TableType.Table, DataService.GetInstance("Provider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarVarcharColumn1 = new TableSchema.TableColumn(schema);
				colvarVarcharColumn1.ColumnName = "varchar_column1";
				colvarVarcharColumn1.DataType = DbType.AnsiString;
				colvarVarcharColumn1.MaxLength = 50;
				colvarVarcharColumn1.AutoIncrement = false;
				colvarVarcharColumn1.IsNullable = true;
				colvarVarcharColumn1.IsPrimaryKey = false;
				colvarVarcharColumn1.IsForeignKey = false;
				colvarVarcharColumn1.IsReadOnly = false;
				colvarVarcharColumn1.DefaultSetting = @"";
				colvarVarcharColumn1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVarcharColumn1);
				
				TableSchema.TableColumn colvarVarcharColumn2 = new TableSchema.TableColumn(schema);
				colvarVarcharColumn2.ColumnName = "varchar_column2";
				colvarVarcharColumn2.DataType = DbType.AnsiString;
				colvarVarcharColumn2.MaxLength = 50;
				colvarVarcharColumn2.AutoIncrement = false;
				colvarVarcharColumn2.IsNullable = true;
				colvarVarcharColumn2.IsPrimaryKey = false;
				colvarVarcharColumn2.IsForeignKey = false;
				colvarVarcharColumn2.IsReadOnly = false;
				colvarVarcharColumn2.DefaultSetting = @"";
				colvarVarcharColumn2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVarcharColumn2);
				
				TableSchema.TableColumn colvarVarcharColumn3 = new TableSchema.TableColumn(schema);
				colvarVarcharColumn3.ColumnName = "varchar_column3";
				colvarVarcharColumn3.DataType = DbType.AnsiString;
				colvarVarcharColumn3.MaxLength = 50;
				colvarVarcharColumn3.AutoIncrement = false;
				colvarVarcharColumn3.IsNullable = true;
				colvarVarcharColumn3.IsPrimaryKey = false;
				colvarVarcharColumn3.IsForeignKey = false;
				colvarVarcharColumn3.IsReadOnly = false;
				colvarVarcharColumn3.DefaultSetting = @"";
				colvarVarcharColumn3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVarcharColumn3);
				
				TableSchema.TableColumn colvarIntColumn1 = new TableSchema.TableColumn(schema);
				colvarIntColumn1.ColumnName = "int_column1";
				colvarIntColumn1.DataType = DbType.Int32;
				colvarIntColumn1.MaxLength = 0;
				colvarIntColumn1.AutoIncrement = false;
				colvarIntColumn1.IsNullable = true;
				colvarIntColumn1.IsPrimaryKey = false;
				colvarIntColumn1.IsForeignKey = false;
				colvarIntColumn1.IsReadOnly = false;
				colvarIntColumn1.DefaultSetting = @"";
				colvarIntColumn1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIntColumn1);
				
				TableSchema.TableColumn colvarIntColumn2 = new TableSchema.TableColumn(schema);
				colvarIntColumn2.ColumnName = "int_column2";
				colvarIntColumn2.DataType = DbType.Int32;
				colvarIntColumn2.MaxLength = 0;
				colvarIntColumn2.AutoIncrement = false;
				colvarIntColumn2.IsNullable = true;
				colvarIntColumn2.IsPrimaryKey = false;
				colvarIntColumn2.IsForeignKey = false;
				colvarIntColumn2.IsReadOnly = false;
				colvarIntColumn2.DefaultSetting = @"";
				colvarIntColumn2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIntColumn2);
				
				TableSchema.TableColumn colvarCreatedAt = new TableSchema.TableColumn(schema);
				colvarCreatedAt.ColumnName = "created_at";
				colvarCreatedAt.DataType = DbType.DateTime;
				colvarCreatedAt.MaxLength = 0;
				colvarCreatedAt.AutoIncrement = false;
				colvarCreatedAt.IsNullable = true;
				colvarCreatedAt.IsPrimaryKey = false;
				colvarCreatedAt.IsForeignKey = false;
				colvarCreatedAt.IsReadOnly = false;
				
						colvarCreatedAt.DefaultSetting = @"(getdate())";
				colvarCreatedAt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedAt);
				
				TableSchema.TableColumn colvarUpdatedAt = new TableSchema.TableColumn(schema);
				colvarUpdatedAt.ColumnName = "updated_at";
				colvarUpdatedAt.DataType = DbType.DateTime;
				colvarUpdatedAt.MaxLength = 0;
				colvarUpdatedAt.AutoIncrement = false;
				colvarUpdatedAt.IsNullable = true;
				colvarUpdatedAt.IsPrimaryKey = false;
				colvarUpdatedAt.IsForeignKey = false;
				colvarUpdatedAt.IsReadOnly = false;
				
						colvarUpdatedAt.DefaultSetting = @"(getdate())";
				colvarUpdatedAt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedAt);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Provider"].AddSchema("my_tbl",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("VarcharColumn1")]
		[Bindable(true)]
		public string VarcharColumn1 
		{
			get { return GetColumnValue<string>(Columns.VarcharColumn1); }
			set { SetColumnValue(Columns.VarcharColumn1, value); }
		}
		  
		[XmlAttribute("VarcharColumn2")]
		[Bindable(true)]
		public string VarcharColumn2 
		{
			get { return GetColumnValue<string>(Columns.VarcharColumn2); }
			set { SetColumnValue(Columns.VarcharColumn2, value); }
		}
		  
		[XmlAttribute("VarcharColumn3")]
		[Bindable(true)]
		public string VarcharColumn3 
		{
			get { return GetColumnValue<string>(Columns.VarcharColumn3); }
			set { SetColumnValue(Columns.VarcharColumn3, value); }
		}
		  
		[XmlAttribute("IntColumn1")]
		[Bindable(true)]
		public int? IntColumn1 
		{
			get { return GetColumnValue<int?>(Columns.IntColumn1); }
			set { SetColumnValue(Columns.IntColumn1, value); }
		}
		  
		[XmlAttribute("IntColumn2")]
		[Bindable(true)]
		public int? IntColumn2 
		{
			get { return GetColumnValue<int?>(Columns.IntColumn2); }
			set { SetColumnValue(Columns.IntColumn2, value); }
		}
		  
		[XmlAttribute("CreatedAt")]
		[Bindable(true)]
		public DateTime? CreatedAt 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedAt); }
			set { SetColumnValue(Columns.CreatedAt, value); }
		}
		  
		[XmlAttribute("UpdatedAt")]
		[Bindable(true)]
		public DateTime? UpdatedAt 
		{
			get { return GetColumnValue<DateTime?>(Columns.UpdatedAt); }
			set { SetColumnValue(Columns.UpdatedAt, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varId,string varVarcharColumn1,string varVarcharColumn2,string varVarcharColumn3,int? varIntColumn1,int? varIntColumn2,DateTime? varCreatedAt,DateTime? varUpdatedAt)
		{
			MyTbl item = new MyTbl();
			
			item.Id = varId;
			
			item.VarcharColumn1 = varVarcharColumn1;
			
			item.VarcharColumn2 = varVarcharColumn2;
			
			item.VarcharColumn3 = varVarcharColumn3;
			
			item.IntColumn1 = varIntColumn1;
			
			item.IntColumn2 = varIntColumn2;
			
			item.CreatedAt = varCreatedAt;
			
			item.UpdatedAt = varUpdatedAt;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varVarcharColumn1,string varVarcharColumn2,string varVarcharColumn3,int? varIntColumn1,int? varIntColumn2,DateTime? varCreatedAt,DateTime? varUpdatedAt)
		{
			MyTbl item = new MyTbl();
			
				item.Id = varId;
			
				item.VarcharColumn1 = varVarcharColumn1;
			
				item.VarcharColumn2 = varVarcharColumn2;
			
				item.VarcharColumn3 = varVarcharColumn3;
			
				item.IntColumn1 = varIntColumn1;
			
				item.IntColumn2 = varIntColumn2;
			
				item.CreatedAt = varCreatedAt;
			
				item.UpdatedAt = varUpdatedAt;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn VarcharColumn1Column
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn VarcharColumn2Column
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn VarcharColumn3Column
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IntColumn1Column
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IntColumn2Column
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedAtColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedAtColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string VarcharColumn1 = @"varchar_column1";
			 public static string VarcharColumn2 = @"varchar_column2";
			 public static string VarcharColumn3 = @"varchar_column3";
			 public static string IntColumn1 = @"int_column1";
			 public static string IntColumn2 = @"int_column2";
			 public static string CreatedAt = @"created_at";
			 public static string UpdatedAt = @"updated_at";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
